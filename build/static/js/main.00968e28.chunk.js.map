{"version":3,"sources":["redux/reducers/errorsReducer.js","redux/reducers/loginModeReducer.js","redux/reducers/userReducer.js","redux/reducers/ordersReducer.js","redux/reducers/productsReducer.js","redux/reducers/notesReducer.js","redux/reducers/index.js","redux/sagas/loginSaga.js","redux/sagas/registrationSaga.js","redux/sagas/userSaga.js","redux/sagas/ordersSaga.js","redux/sagas/historySaga.js","redux/sagas/notesSaga.js","redux/sagas/index.js","components/LogOutButton/LogOutButton.js","components/Nav/Nav.js","components/Footer/Footer.js","components/LoginPage/LoginPage.js","components/RegisterPage/RegisterPage.js","components/ProtectedRoute/ProtectedRoute.js","components/AboutPage/AboutPage.js","components/UserPage/UserPageOrdersClick.js","components/UserPage/UserPageOrders.js","components/UserPage/ManagerPageOrders.js","components/History/History.js","components/UserPage/UserPage.js","components/InfoPage/InfoPage.js","components/UpdateOrders/UpdateOrdersProducts.js","components/UpdateOrders/UpdateOrders.js","components/OrderSheet/OrderSheetItem.js","components/OrderSheet/OrderSheet.js","components/App/App.js","index.js"],"names":["combineReducers","loginMessage","state","arguments","length","undefined","type","registrationMessage","loginMode","userReducer","action","payload","orders","products","notes","rootReducer","errors","user","loginUser","logoutUser","loginSaga","config","regenerator_default","a","wrap","_context","prev","next","put","headers","Content-Type","withCredentials","axios","post","t0","console","log","response","status","stop","_marked","this","_context2","_marked2","_context3","takeLatest","_marked3","registerUser","registrationSaga","registrationSaga_marked","registrationSaga_marked2","fetchUser","userSaga","get","sent","data","userSaga_marked","userSaga_marked2","getOrders","ordersSaga","alert","ordersSaga_marked","ordersSaga_marked2","postHistory","historySaga","historySaga_marked","historySaga_marked2","getNotes","notesSaga","notesSaga_marked","notesSaga_marked2","rootSaga","all","productsSaga","sagas_marked","connect","props","react_default","createElement","className","onClick","dispatch","Link","to","id","xmlns","width","height","viewBox","fill","d","Fragment","manager","components_LogOutButton_LogOutButton","Footer","LoginPage","username","password","login","event","preventDefault","_this","handleInputChangeFor","propertyName","setState","Object","defineProperty","target","value","_this2","Grid_default","container","spacing","style","padding","direction","alignItems","role","onSubmit","htmlFor","TextField_default","item","xs","xl","variant","label","onChange","paddingTop","paddingBottom","name","Button_default","Component","RegisterPage","ComponentToShow","ComponentToProtect","component","otherProps","objectWithoutProperties","Route","assign","AboutPage","moment","require","UserPageOrders","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toOrderSheet","method","url","order","order_id","person","person_id","date","then","history","push","concat","format","statusName","status_id","TableRow_default","TableCell_default","order_name","userId","reduxStore","justify","Card_default","Table_default","TableHead_default","TableBody_default","map","UserPageOrdersClick","key","orderHeader","dateHeader","ManagerPageOrders","index_es","currentDate","UserPage","userPageContent","UserPage_UserPageOrders","UserPage_ManagerPageOrders","InfoPage","UpdateOrdersProducts","deleteProduct","product","getProducts","catch","error","product_name","UpdateOrders","getPerson","people","getOldProduct","allProducts","setOldProduct","objectSpread","oldProduct","addOldProduct","productToAdd","selectedOrder","orderId","orderProducts","setOrder","setWriter","writer","updateWriter","setProduct","addProduct","orderWriterContent","addNewProduct","buttonStatus","oldProductStatus","productStatus","currentWriter","disabled","selected","placeholder","contianer","UpdateOrders_UpdateOrdersProducts","OrderSheet","upCount","upQuantity","i","downCount","downQuantity","productContent","statusId","quantity","Fab_default","size","userInfo","match","params","personId","orderDetails","note","approveOrder","button","saveOrder","submitOrder","setNote","addNote","productsCopy","JSON","parse","stringify","backDay","_ref","asyncToGenerator","mark","_callee","subtract","componentDidMount","_x","apply","forwardDay","_ref2","_callee2","add","_x2","noteContent","addNoteContent","buttons","List_default","ListItem_default","note_entry","fullWidth","color","OrderSheet_OrderSheetItem","History","historyQuery","getHistory","setDate","noteHeader","FormControl_default","disable","App","HashRouter","components_Nav_Nav","Switch","Redirect","exact","from","path","components_ProtectedRoute_ProtectedRoute","render","components_Footer_Footer","sagaMiddleware","createSagaMiddleware","middlewareList","store","createStore","applyMiddleware","run","ReactDOM","react_redux_es","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.00968e28.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\n// loginMessage holds the string that will display\n// on the login screen if there's an error\nconst loginMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_LOGIN_ERROR':\n      return '';\n    case 'LOGIN_INPUT_ERROR':\n      return 'Enter your username and password!';\n    case 'LOGIN_FAILED':\n      return 'Oops! The username and password didn\\'t match. Try again!';\n    case 'LOGIN_FAILED_NO_CODE':\n      return 'Oops! Something went wrong! Is the server running?';\n    default:\n      return state;\n  }\n};\n\n// registrationMessage holds the string that will display\n// on the registration screen if there's an error\nconst registrationMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_REGISTRATION_ERROR':\n      return '';\n    case 'REGISTRATION_INPUT_ERROR':\n      return 'Choose a username and password!';\n    case 'REGISTRATION_FAILED':\n      return 'Oops! That didn\\'t work. The username might already be taken. Try again!';\n    default:\n      return state;\n  }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n  loginMessage,\n  registrationMessage,\n});\n","const loginMode = (state = 'login', action) => {\n    switch (action.type) {\n      case 'SET_TO_LOGIN_MODE':\n        return 'login';\n      case 'SET_TO_REGISTER_MODE':\n        return 'register';\n      default:\n        return state;\n    }\n  };\n\n// loginMode will be on the redux state at:\n// state.loginMode\n  export default loginMode;\n  ","const userReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return action.payload;\n    case 'UNSET_USER':\n      return {};\n    default:\n      return state;\n  }\n};\n\n// user will be on the redux state at:\n// state.user\nexport default userReducer;\n","const orders = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_ORDERS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n\nexport default orders;","const products = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_PRODUCTS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default products;","const notes = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_NOTES':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default notes;","import { combineReducers } from 'redux';\nimport errors from './errorsReducer';\nimport loginMode from './loginModeReducer';\nimport user from './userReducer';\nimport orders from './ordersReducer';\nimport products from './productsReducer';\nimport notes from './notesReducer';\n// rootReducer is the primary reducer for our entire project\n// It bundles up all of the other reducers so our project can use them.\n// This is imported in index.js as rootSaga\n\n// Lets make a bigger object for our store, with the objects from our reducers.\n// This is what we get when we use 'state' inside of 'mapStateToProps'\nconst rootReducer = combineReducers({\n  notes,\n  orders,\n  products,\n  errors, // contains registrationMessage and loginMessage\n  loginMode, // will have a value of 'login' or 'registration' to control which screen is shown\n  user, // will have an id and username if someone is logged in\n});\n\nexport default rootReducer;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n  try {\n    // clear any existing error on the login page\n    yield put({ type: 'CLEAR_LOGIN_ERROR' });\n\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    yield axios.post('api/user/login', action.payload, config);\n    \n    // after the user has logged in\n    // get the user information from the server\n    yield put({type: 'FETCH_USER'});\n  } catch (error) {\n    console.log('Error with user login:', error);\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the username and password don't match in the database\n      yield put({ type: 'LOGIN_FAILED' });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({ type: 'LOGIN_FAILED_NO_CODE' });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n    yield axios.post('api/user/logout', config);\n\n    // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n    yield put({ type: 'UNSET_USER' });\n\n  } catch (error) {\n    console.log('Error with user logout:', error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest('LOGIN', loginUser);\n  yield takeLatest('LOGOUT', logoutUser);\n}\n\nexport default loginSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\n\n    // passes the username and password from the payload to the server\n    yield axios.post('api/user/register', action.payload);\n\n    // automatically log a user in after registration\n    yield put({ type: 'LOGIN', payload: action.payload });\n    \n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({type: 'SET_TO_LOGIN_MODE'});\n  } catch (error) {\n      console.log('Error with user registration:', error);\n      yield put({type: 'REGISTRATION_FAILED'});\n  }\n}\n\nfunction* registrationSaga() {\n  yield takeLatest('REGISTER', registerUser);\n}\n\nexport default registrationSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get('api/user', config);\n\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_USER', payload: response.data });\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nfunction* getOrders(action) {\n    \n    \n    try {\n        \n        let response =yield axios.post('/api/dashboardGet',action.payload)\n        console.log('order saga:', action.payload);\n        const orders = { type: 'SET_ORDERS', payload: response.data }\n        yield put(orders)\n    } catch (error) {\n        console.log('Error making Get request in getOrders', error);\n        alert('there was a problem');\n    }\n}\n\nfunction* ordersSaga() {\n    yield takeLatest('GET_ORDERS', getOrders);\n}\n\nexport default ordersSaga;","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction* postHistory(action) {\n    try {\n        console.log('in postHistory: ');\n        \n       let response= yield axios.post('/api/history', action.payload)\n        const products = {type: 'SET_PRODUCTS', payload: response.data }\n        yield put(products)\n    } catch (error) {\n        console.log('Error making POST request in postHistory', error);\n        alert('there was a problem');\n    }\n}\n\nfunction* historySaga() {\n    yield takeLatest('POST_HISTORY', postHistory);\n}\n\nexport default historySaga;","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction* getNotes(action) {\n    try {\n        console.log('in getNotes: ', action.payload);\n\n        let response = yield axios.post('/api/notesGet/')\n        const notes = { type: 'SET_NOTES', payload: response.data }\n        yield put(notes)\n    } catch (error) {\n        console.log('Error making GET request in getNotes', error);\n        alert('there was a problem');\n    }\n}\n\nfunction* notesSaga() {\n    yield takeLatest('GET_NOTES', getNotes);\n}\n\nexport default notesSaga;","import { all } from 'redux-saga/effects';\nimport loginSaga from './loginSaga';\nimport registrationSaga from './registrationSaga';\nimport userSaga from './userSaga';\nimport ordersSaga from './ordersSaga';\nimport historySaga from './historySaga';\nimport productsSaga from './historySaga';\nimport notesSaga from './notesSaga';\n// rootSaga is the primary saga.\n// It bundles up all of the other sagas so our project can use them.\n// This is imported in index.js as rootSaga\n\n// some sagas trigger other sagas, as an example\n// the registration triggers a login\n// and login triggers setting the user\nexport default function* rootSaga() {\n  yield all([\n    notesSaga(),\n    productsSaga(),\n    historySaga(),\n    ordersSaga(),\n    loginSaga(),\n    registrationSaga(),\n    userSaga(),\n  ]);\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst LogOutButton = props => (\n  <button\n    // This button shows up in multiple locations and is styled differently\n    // because it's styled differently depending on where it is used, the className\n    // is passed to it from it's parents through React props\n    className={props.className}\n    onClick={() => props.dispatch({ type: 'LOGOUT' })}\n  >\n    Log Out\n  </button>\n);\n\n// This component doesn't need 'mapStateToProps'\n// because it doesn't care what the current state is.\n// No matter what the redux state is, this button will always be a log out button\n// this component still needs 'connect' though, because it is going to dispatch a redux action\nexport default connect()(LogOutButton);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport LogOutButton from '../LogOutButton/LogOutButton';\nimport './Nav.css';\n\nconst Nav = (props) => (\n  \n  <div className=\"nav\"\n>\n    <Link to=\"/home\">\n      <h2 className=\"nav-title\">Daily Orders App</h2>\n    </Link>\n    \n    <div className=\"nav-right\"\n      \n    >\n      <Link className=\"nav-link\" to=\"/home\">\n        {/* Show this link if they are logged in or not,\n        but call this link 'Home' if they are logged in,\n        and call this link 'Login / Register' if they are not */}\n        {props.user.id ? <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\" /><path d=\"M12 5.69l5 4.5V18h-2v-6H9v6H7v-7.81l5-4.5M12 3L2 12h3v8h6v-6h2v6h6v-8h3L12 3z\" /></svg> : 'Login / Register'}\n\n      </Link>\n      {/* Show the link to the info page and the logout button if the user is logged in */}\n      {props.user.id && (\n        <>\n          <Link className=\"nav-link\" to=\"/history\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\" /><path d=\"M7 11h2v2H7v-2zm14-5v14c0 1.1-.9 2-2 2H5c-1.11 0-2-.9-2-2l.01-14c0-1.1.88-2 1.99-2h1V2h2v2h8V2h2v2h1c1.1 0 2 .9 2 2zM5 8h14V6H5v2zm14 12V10H5v10h14zm-4-7h2v-2h-2v2zm-4 0h2v-2h-2v2z\" /></svg>\n          </Link>\n          \n         \n        </>\n      )}\n      {props.user.manager &&(\n        <Link className=\"nav-link\" to=\"/update\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\" /><path d=\"M19 3h-4.18C14.4 1.84 13.3 1 12 1s-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7-.25c.22 0 .41.1.55.25.12.13.2.31.2.5 0 .41-.34.75-.75.75s-.75-.34-.75-.75c0-.19.08-.37.2-.5.14-.15.33-.25.55-.25zM19 19H5V5h14v14zM12 6c-1.65 0-3 1.35-3 3s1.35 3 3 3 3-1.35 3-3-1.35-3-3-3zm0 4c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm-6 6.47V18h12v-1.53c0-2.5-3.97-3.58-6-3.58s-6 1.07-6 3.58zM8.31 16c.69-.56 2.38-1.12 3.69-1.12s3.01.56 3.69 1.12H8.31z\" /></svg>\n          </Link>\n      )}\n      {props.user.id && (\n        <LogOutButton className=\"nav-link\"/>\n      )}\n    </div>\n  </div>\n);\n\n// Instead of taking everything from state, we just want the user\n// object to determine if they are logged in\n// if they are logged in, we show them a few more links \n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user }) => ({ user });\nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\nexport default connect(mapStateToProps)(Nav);\n","import React from 'react';\nimport './Footer.css'\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst Footer = () => (\n  <footer>\n  </footer>\n);\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\n\nclass LoginPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  login = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'LOGIN',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'LOGIN_INPUT_ERROR' });\n    }\n  } // end login\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n  \n  render() {\n    return (\n      <div>\n        <Grid container spacing={24} style={{ padding: 24 }}\n        direction=\"column\"\n        alignItems=\"center\">\n        {this.props.errors.loginMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.loginMessage}\n          </h2>\n        )}\n        <form onSubmit={this.login}>\n          <h1>Login</h1>\n          <div>\n            <label htmlFor=\"username\">\n              <TextField item xs={12} xl={12}\n                variant=\"outlined\"\n              id=\"outlined-name\"\n                type=\"text\"\n                label=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              <TextField\n                  style={{ paddingTop: 10, paddingBottom:  10 }}\n                variant=\"outlined\"\n                  type=\"password\"\n                  label=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </label>\n          </div>\n          <div >\n            <Grid item direction=\"row\"\n            alignItems=\"center\">\n                \n            <input\n              className=\"log-in\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Log In\"\n            />\n              \n                <Button\n                variant=\"contained\"\n                style={{height:47, width:97}}\n                  type=\"button\"\n                  className=\"link-button\"\n                  onClick={() => { this.props.dispatch({ type: 'SET_TO_REGISTER_MODE' }) }}\n                >\n                  Register\n          </Button>\n              \n              </Grid>\n          </div>\n        </form>\n        \n        \n        </Grid>\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(LoginPage);\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\n\nclass RegisterPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  registerUser = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'REGISTER',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({type: 'REGISTRATION_INPUT_ERROR'});\n    }\n  } // end registerUser\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.errors.registrationMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.registrationMessage}\n          </h2>\n        )}\n        <form onSubmit={this.registerUser}>\n          <h1>Register User</h1>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n              <input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </label>\n          </div>\n          <div>\n            <input\n              className=\"register\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Register\"\n            />\n          </div>\n        </form>\n        <center>\n          <button\n            type=\"button\"\n            className=\"link-button\"\n            onClick={() => {this.props.dispatch({type: 'SET_TO_LOGIN_MODE'})}}\n          >\n            Login\n          </button>\n        </center>\n      </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(RegisterPage);\n\n","import React from 'react';\nimport {Route} from 'react-router-dom'\nimport {connect} from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nconst ProtectedRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    user,\n    loginMode,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n  if(user.id) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else if (loginMode === 'login') {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = LoginPage;\n  } else {\n    // the the user is not logged in and the mode is not 'login'\n    // show the RegisterPage\n    ComponentToShow = RegisterPage;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n      <Route\n        // all props like 'exact' and 'path' that were passed in\n        // are now passed along to the 'Route' Component\n        {...otherProps}\n        component={ComponentToShow}\n      />\n  )\n}\n\n// Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user, loginMode }) => ({ user, loginMode });\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    loginMode: state.loginMode,\n  }\n}\n\nexport default connect(mapStateToProps)(ProtectedRoute)\n\n\n","import React from 'react';\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst AboutPage = () => (\n  <div>\n    <div>\n      <p>\n        This about page is for anyone to read!\n      </p>\n    </div>\n  </div>\n);\n\nexport default AboutPage;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Grid from '@material-ui/core/Grid';\nconst moment = require('moment');\n\nclass UserPageOrders extends Component {\nconstructor(){\nsuper()\nthis.state={\n    date: moment().format('L'),\n}\n}\n    componentDidMount() {\n        this.props.getOrders();\n    }\n\n    toOrderSheet = (event) => {\n        axios({\n            method:'POST',\n            url:'/api/dashboardPost',\n            data:{\n                id:this.props.order.order_id,\n                person:this.props.order.person_id,\n                date:this.state.date,\n            }\n        }).then((response)=>{\n            this.props.history.push(`/home/${this.props.order.order_id}`)\n        })\n    }\n    // this could also be written with destructuring parameters as:\n    // const UserPage = ({ user }) => (\n    // and then instead of `props.user.username` you could use `user.username`\n    // this.render\n    // \n    render() {\n        let statusName;\n        if(this.props.order.status_id==1){\n            statusName = <p>Incomplete</p>\n        }else if(this.props.order.status_id==2){\n            statusName=<p>Complete</p>\n        } else if (this.props.order.status_id==4){\n            statusName=<p>Approved</p>\n        }\n        let orderContent;\n        if(this.props.user.manager==true){\n            orderContent = <TableRow onClick={this.toOrderSheet}>\n                <TableCell>{this.props.order.order_name}</TableCell>\n                <TableCell>{this.props.order.username}</TableCell>\n            </TableRow>\n        }else{\n            orderContent = <TableRow onClick={this.toOrderSheet}>\n                <TableCell>{this.props.order.order_name}</TableCell>\n                        <TableCell>{statusName}</TableCell></TableRow>\n        }\n        return (orderContent)\n    }\n}\n// Instead of taking everything from state, we just want the user info.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({user}) => ({ user });\nconst mapStateToProps = state => ({\n    user: state.user,\n});\n\n// this allows us to use <App /> in index.js\nexport default connect(mapStateToProps)(UserPageOrders);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport UserPageOrdersClick from './UserPageOrdersClick';\nimport axios from 'axios';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Card from '@material-ui/core/Card';\nimport Grid from '@material-ui/core/Grid';\nimport { CardContent } from '@material-ui/core';\nconst moment = require('moment');\nmoment().format();\nclass UserPageOrders extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            orders: [],\n            date: moment().format('L'),\n        }\n    }\n\n    componentDidMount() {\n        this.getOrders();\n    }\n\n    getOrders = () => {\n        console.log('in get orders');\n\n        let userId = { id: this.props.reduxStore.user.id,\n                        date: this.state.date, }\n        axios({\n            method: 'POST',\n            url: '/api/dashboardGet',\n            data: userId,\n        }).then((response) => {\n            this.setState({\n                orders: response.data\n            })\n        })\n\n        // const action = { type: 'GET_ORDERS', payload:id};\n        // this.props.dispatch(action);\n    }\n\n    toOrderSheet = (event) => {\n        this.props.history.push('/home:/id')\n    }\n    // this could also be written with destructuring parameters as:\n    // const UserPage = ({ user }) => (\n    // and then instead of `props.user.username` you could use `user.username`\n    // this.render\n    // \n    render() {\n        return (\n            <Grid\n                container\n                style={{ padding: 20 }}\n                direction=\"column\"\n                justify=\"space-evenly\"\n                alignItems=\"stretch\">\n            <Card >\n                    \n                    <Grid\n                    container\n                    justify=\"center\"\n                    alignItems=\"center\">\n                        <strong>Your Orders</strong>\n                    </Grid>\n                <Table >\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Order Name</TableCell>\n                            <TableCell>Status</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>{this.state.orders.map((order) => {\n                        return (<UserPageOrdersClick key={order.id} order={order} history={this.props.history} getOrders={this.getOrders} />)\n                    })}</TableBody>\n                </Table>\n            </Card>\n            </Grid>\n        )\n    }\n}\n// Instead of taking everything from state, we just want the user info.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({user}) => ({ user });\nconst mapStateToProps = reduxStore => ({\n    reduxStore,\n});\n\n// this allows us to use <App /> in index.js\nexport default connect(mapStateToProps)(UserPageOrders);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport UserPageOrdersClick from './UserPageOrdersClick';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Card from '@material-ui/core/Card';\nimport axios from 'axios';\nimport Grid from '@material-ui/core/Grid';\nimport { CardContent } from '@material-ui/core';\nconst moment = require('moment');\nmoment().format();\nclass ManagerPageOrders extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            orders: [],\n            date: moment().format('L'),\n        }\n    }\n\n    componentDidMount() {\n        this.getOrders();\n    }\n\n    // getOrders = () => {\n    //     const action = { type: 'GET_ORDERS' };\n    //     this.props.dispatch(action);\n    // }\n    getOrders = () => {\n        console.log('in get orders');\n\n        let userId = {\n            //id: this.props.reduxStore.user.id,\n            date: this.state.date,\n        }\n        axios({\n            method: 'POST',\n            url: '/api/dashboardGet',\n            data: userId,\n        }).then((response) => {\n            this.setState({\n                orders: response.data\n            })\n        })\n    }\n    toOrderSheet = (event) => {\n        this.props.history.push('/home:/id')\n    }\n    // this could also be written with destructuring parameters as:\n    // const UserPage = ({ user }) => (\n    // and then instead of `props.user.username` you could use `user.username`\n    // this.render\n    // \n    render() {\n        return (        \n                <Grid container\n                    direction=\"column\"\n                    justify=\"space-evenly\"\n                    alignItems=\"stretch\">\n                    <Grid\n                        container\n                        direction=\"column\"\n                        justify=\"space-evenly\"\n                        alignItems=\"stretch\"\n                    style={{ padding: 20 }}>\n                <Card >\n                    <CardContent><strong>Orders Pending Apporoval</strong>\n                    </CardContent>\n                    <Table >\n                        <TableHead alignItems=\"center\">        \n                            <TableRow>\n                                <TableCell>Order Name</TableCell>\n                                <TableCell>Writer</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>{this.state.orders.map((order) => {\n                            if (order.status_id == 2) {\n                                return (<UserPageOrdersClick key={order.id} order={order}\n                                    history={this.props.history}\n                                    getOrders={this.getOrders} />)\n                            }\n                        })}</TableBody>\n                    </Table>\n                </Card>\n                        </Grid>\n                    <Grid\n                        container\n                        direction=\"column\"\n                        justify=\"space-evenly\"\n                        alignItems=\"stretch\"\n                        style={{ padding: 20 }}>\n                <Card >\n                    <CardContent><strong>Orders Incomplete</strong>\n                    </CardContent>\n                    <Table >\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Order Name</TableCell>\n                                <TableCell>Writer</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>{this.state.orders.map((order) => {\n                            if (order.status_id == 1) {\n                                return (<UserPageOrdersClick key={order.id} order={order}\n                                    history={this.props.history}\n                                    getOrders={this.getOrders} />)\n                            }\n                        })}</TableBody>\n                    </Table>\n                </Card>\n                    </Grid>\n                    <Grid\n                        container\n                        direction=\"column\"\n                        justify=\"space-evenly\"\n                        alignItems=\"stretch\"\n                        style={{ padding: 20 }}>\n                <Card >\n                    <CardContent>\n                        <strong>Orders Approved</strong>\n                    </CardContent>\n                    <Table >\n                        <TableHead>\n                                    \n                            <TableRow>\n                                <TableCell>Order Name</TableCell>\n                                <TableCell>Writer</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>{this.state.orders.map((order) => {\n                            if (order.status_id == 4) {\n                                return (<UserPageOrdersClick key={order.id} order={order}\n                                    history={this.props.history}\n                                    getOrders={this.getOrders} />)\n                            }\n                        })}</TableBody>\n                    </Table>\n                </Card> \n                </Grid> \n                </Grid>   \n        )\n    }\n}\n\n// Instead of taking everything from state, we just want the user info.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({user}) => ({ user });\nconst mapStateToProps = reduxStore => ({\n    reduxStore,\n});\n\n// this allows us to use <App /> in index.js\nexport default connect(mapStateToProps)(ManagerPageOrders);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Input from '@material-ui/core/Input';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport FilledInput from '@material-ui/core/FilledInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { Menu } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport Grid from '@material-ui/core/Grid';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nconst moment = require('moment');\nlet orderHeader;\nlet dateHeader;\n\nclass History extends Component {\n    \nconstructor(){\n    super()\n    this.state={\n        orders:[],\n        historyQuery:{\n            date:null,\n            order:null,\n        },\n        products:[],\n        notes:[],\n        date: moment().format('L'),\n    }\n}\n\n    componentDidMount() {\n        this.getOrders();\n    }\n\n    getOrders = () => {\n        console.log('in get orders');\n\n        let userId = { id: this.props.reduxStore.user.id,\n                       date: this.state.date, }\n        axios({\n            method: 'POST',\n            url: '/api/dashboardGet',\n            data: userId,\n        }).then((response) => {\n            this.setState({\n                orders: response.data\n            })\n        })\n\n        // const action = { type: 'GET_ORDERS', payload:id};\n        // this.props.dispatch(action);\n    }\n\n    getNotes = (event) => {\n        let notes = {\n            order: this.state.historyQuery.order,\n            date: this.state.historyQuery.date,\n        }\n        axios({\n            method: 'POST',\n            url: '/api/notesGet',\n            data: notes,\n        }).then((response) => {\n            this.setState({\n\n                ...this.state,\n                notes: response.data,\n            })\n        })\n    }\n\n    getHistory = (event) => {\n        const action = { type: 'POST_HISTORY', payload: this.state.historyQuery }\n        this.props.dispatch(action)\n        this.getNotes();\n        orderHeader = <h3>{\n            this.state.orders.map((order) => {\n                if (order.order_id == this.state.historyQuery.order) {\n                    return (order.order_name)\n                }\n            })}</h3>\n        dateHeader = <h3>{this.state.historyQuery.date}</h3>\n        \n    }\n\n    setOrder = (event) => {\n        this.setState({\n            historyQuery: {\n                ...this.state.historyQuery,\n                order: event.target.value,\n            }\n        })\n    }\n\n    setDate = (event) => {\n        this.setState({\n            historyQuery: {\n                ...this.state.historyQuery,\n                date: event.target.value,\n            }\n        })\n    }\n\n    render() {\n        let noteHeader;\n        if (this.state.notes.length > 0) {\n            noteHeader = <h3>Notes:</h3>;\n        }\n        return (\n            <div>\n                <Grid contianer\n                    direction=\"column\"\n                    justify=\"flex-start\"\n                    alignItems=\"center\">\n                    <Card className=\"dateToggle\">\n                        <Grid\n                            container\n                            direction=\"column\"\n                            justify=\"flex-start\"\n                            alignItems=\"center\"\n                        >\n                <h1>History</h1>\n                </Grid>\n                <h3>Date</h3>\n                <TextField type=\"date\" variant=\"outlined\" fullWidth onChange={this.setDate}/>\n                <h3>Order</h3>\n                        <FormControl fullWidth>\n                            {/* <InputLabel >Order Name</InputLabel> */}\n                            <select onChange={this.setOrder}>\n                            {/* // input={ */}\n                            {/* //     <OutlinedInput */}\n                            {/* //         labelWidth={85}\n                            //         name=\"Order Name\"\n                            //     />}   */}\n                                \n                                <option value='' disable selected> Select an Order</option>\n                    {this.state.orders.map((order) => {\n                        return (<option value={order.order_id}>{order.order_name}</option>)\n                    })}\n                </select>\n                        </FormControl>\n                        <Grid container\n                            style={{ paddingTop: 10 }}\n                            justify=\"flex-end\"\n                            direction=\"row\">\n                <Button variant=\"outlined\"onClick={this.getHistory}>Show history</Button>\n                        </Grid>\n                        <Grid\n                            container\n                            direction=\"column\"\n                            justify=\"flex-start\"\n                            alignItems=\"center\"\n                        >\n                {orderHeader} {dateHeader}\n                        </Grid>  \n                {noteHeader}\n                <List>\n                    {this.state.notes.map((note) => {\n                        return <ListItem>{note.note_entry}</ListItem>\n                    })}\n                </List>\n                        \n                            \n                        \n                    <Grid\n                        container\n                        style={{ padding: 20 }}\n                        direction=\"column\"\n                        justify=\"space-between\"\n                        alignItems=\"space-between\">{this.props.reduxStore.products.map((product)=>{\n                            return <TableRow><Grid\n                                container\n                                style={{ padding: 20 }}\n                                direction=\"row\"\n                                justify=\"space-between\"\n                                alignItems=\"space-between\">\n                                <TableCell><h4 >{product.product_name}</h4></TableCell>\n                                <TableCell><h4 >{product.quantity}</h4></TableCell>\n                            </Grid>\n                            </TableRow>\n                        })}</Grid>\n                </Card>\n                </Grid>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = reduxStore => ({\n    reduxStore,\n});\n\n// this allows us to use <App /> in index.js\nexport default connect(mapStateToProps)(History);","import React , {Component} from 'react';\nimport { connect } from 'react-redux';\nimport UserPageOrders from './UserPageOrders';\nimport ManagerPageOrders from './ManagerPageOrders';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport './UserPage.css'\nconst moment = require('moment');\nconst currentDate = moment().format('L')\nclass UserPage extends Component {\n\n// this could also be written with destructuring parameters as:\n// const UserPage = ({ user }) => (\n// and then instead of `props.user.username` you could use `user.username`\n// this.render\n// \nrender(){\n  let userPageContent;\n  if (this.props.user.manager===false){\n    userPageContent = \n      <UserPageOrders history={this.props.history} />\n  }else{\n    userPageContent =\n      <ManagerPageOrders history={this.props.history} />\n  }\n  return(\n    <div>\n      \n    <Grid\n      container\n      direction=\"column\"\n      alignItems=\"center\"\n    >\n      <h1>Welcome, {this.props.user.username}</h1>\n      <h3>Today's Date<br></br>{currentDate}</h3>\n\n    </Grid> \n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n\n      >\n     {userPageContent}\n     \n      </Grid>\n   \n    </div>\n  )\n}\n}\n// Instead of taking everything from state, we just want the user info.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({user}) => ({ user });\nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\n// this allows us to use <App /> in index.js\nexport default connect(mapStateToProps)(UserPage);\n","import React from 'react';\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst InfoPage = () => (\n  <div>\n    <p>\n      Info Page\n    </p>\n  </div>\n);\n\nexport default InfoPage;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\nclass UpdateOrdersProducts extends Component {\n\n    deleteProduct = () => {\n        axios({\n            method: 'DELETE',\n            url: `/api/updateorders/${this.props.product.id}`\n        }).then((response) => {\n            this.props.getProducts();\n        }).catch((error) => {\n            console.log(error);\n        });\n    }\n\n    render() {\n\n        return (\n            <TableRow><Grid\n                container\n                style={{ padding: 20 }}\n                direction=\"row\"\n                justify=\"space-between\"\n                alignItems=\"space-between\">\n            <TableCell>\n                {this.props.product.product_name}\n            </TableCell>\n                <TableCell>\n                {<Button variant=\"outlined\"onClick={this.deleteProduct}\n                        >Delete</Button>}\n            </TableCell>\n            </Grid>\n            </TableRow>)\n    }\n}\n\nconst mapStateToProps = reduxStore => ({\n    reduxStore,\n})\n\nexport default connect(mapStateToProps)(UpdateOrdersProducts);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport LogOutButton from '../LogOutButton/LogOutButton';\nimport UpdateOrdersProducts from './UpdateOrdersProducts';\nimport Card from '@material-ui/core/Card';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\n\nimport axios from 'axios';\nconst moment = require('moment');\n\nclass UpdateOrders extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            orders: [],\n            selectedOrder: null,\n            orderProducts: [],\n            allProducts:[],\n            people: [],\n            oldProduct:null,\n            product:null,\n            writer:null,\n            date: moment().format('L'),\n        }\n    }\n\n    componentDidMount() {\n        this.getOrders();\n        this.getPerson();\n        this.getOldProduct();\n    }\n\n    getOrders = () => {\n        console.log('in get orders');\n\n        let userId = { id: this.props.reduxStore.user.id,\n                        date: this.state.date }\n        axios({\n            method: 'GET',\n            url: '/api/dashboardGet',\n            data: userId,\n        }).then((response) => {\n            this.setState({\n                orders: response.data\n            })\n        }).catch((error)=>{\n            console.log('error in getOrders',error);\n        })\n\n        // const action = { type: 'GET_ORDERS', payload:id};\n        // this.props.dispatch(action);\n    }\n\n    getPerson = (event)=>{\n        axios({\n            method:'GET',\n            url:'/api/updateorders',\n        }).then((response)=>{\n            this.setState({\n                people:response.data\n            })\n        }).catch((error)=>{\n            console.log('error in getPerson', error);    \n        })\n    }\n    getOldProduct = (event)=>{\n        axios({\n            method:'GET',\n            url:'/api/updateorders/oldproducts',\n        }).then((response)=>{\n            this.setState({\n                allProducts:response.data\n            })\n        }).catch((error) => {\n            console.log('error in selectedOldProduct', error);\n        })\n    }\n\n    setOldProduct=(event)=>{\n        this.setState({\n            ...this.state.oldProduct, oldProduct: event.target.value,\n        })\n    }\n\n    addOldProduct = (event) => {\n        console.log('in addOldProduct');\n        \n        let productToAdd = {\n            name: this.state.oldProduct,\n            id: this.state.selectedOrder\n        }\n        axios({\n            method: 'POST',\n            url: '/api/updateorders/old',\n            data: productToAdd\n        }).then((response) => {\n            this.getProducts();\n        }).catch((error) => {\n            console.log('error in addProduct', error);\n        })\n    }\n\n    getProducts = (event) =>{\n        let orderId = {id:this.state.selectedOrder}\n        axios({\n            method: 'POST',\n            url: '/api/updateorders/products',\n            data: orderId,\n        }).then((response)=>{\n            this.setState({\n                orderProducts:response.data\n            })\n        }).catch((error)=>{\n            console.log('error in getProducts',error);   \n        })\n    }\n\n    setOrder = (event) => {\n        this.setState({\n            ...this.state.selectedOrder, selectedOrder: event.target.value,\n        }, () => {\n            this.getProducts() \n        });\n    }\n\n    setWriter = (event)=>{\n        this.setState({\n            ...this.state.writer, writer:event.target.value,\n        })\n    }\n\n    updateWriter = (event) =>{\n        let writer = {id:this.state.writer,\n                        orderId:this.state.selectedOrder}\n        axios({\n            method:'PUT',\n            url:'/api/updateorders',\n            data: writer,\n        }).then((response)=>{\n            this.getProducts();\n        }).catch((error)=>{\n            console.log('error in updateWriter', error);           \n        })\n    }\n\n    setProduct = (event) =>{\n        this.setState({\n            ...this.state.product, product: event.target.value\n        })\n    }\n\n    addProduct = (event)=>{\n        let productToAdd = {name:this.state.product,\n                            id:this.state.selectedOrder}\n        axios({\n            method:'POST',\n            url:'/api/updateorders/add',\n            data:productToAdd\n        }).then((response)=>{\n            this.getProducts();\n        }).catch((error)=>{\n            console.log('error in addProduct',error);    \n        })\n    }\n\n    render() {\n    \n        let orderWriterContent;\n        let orderHeader;\n        let addNewProduct;\n        let addOldProduct;\n        let buttonStatus;\n        let oldProductStatus;\n        let productStatus;\n        if(this.state.writer==null){\n            buttonStatus=true\n        }\n        if (this.state.oldProduct == null) {\n            oldProductStatus = true\n        }\n        if (this.state.product == null) {\n            productStatus = true\n        }\n        if (this.state.selectedOrder != null) { \n            orderWriterContent =<div><select onChange={this.setWriter}>\n                <option value='' disabled selected > Select a Crew Member</option>\n                {this.state.people.map((person) => {\n                    return (<option value={person.id}>{person.username}</option>)\n                })}\n            </select>\n            <button disabled={buttonStatus} onClick={this.updateWriter}>Update Writer</button></div> \n\n            orderHeader = <h1>Update Order: {this.state.orders.map((order) => {\n                if (order.id == this.state.selectedOrder) {\n                    return (order.order_name)\n                }\n            })}</h1>\n            addOldProduct=\n                <Grid\n                    container\n                    style={{ padding: 20 }}\n                    direction=\"column\"\n                    justify=\"space-between\"\n                    alignItems=\"space-between\">\n                Add Existing Product \n                <Grid\n                    container\n                    style={{ paddingTop: 10 }}\n                    direction=\"column\"\n                    justify=\"space-between\"\n                    alignItems=\"space-between\">\n                <select onChange={this.setOldProduct}>\n                    <option value='' disabled selected> Select Product</option>\n                    {this.state.allProducts.map((product)=>{\n                        return (<option value={product.id}>\n                            {product.product_name}</option>)\n                    })}\n                </select>\n                </Grid>\n                <Grid\n                    container\n                    style={{ paddingTop: 10 }}\n                    direction=\"column\"\n                    justify=\"space-between\"\n                    alignItems=\"space-between\">\n                <Button variant=\"outlined\"disabled={oldProductStatus} onClick={this.addOldProduct}>Add Old Product</Button>\n            </Grid></Grid>\n            addNewProduct=\n                <Grid\n                    container\n                    style={{ padding: 20 }}\n                    direction=\"column\"\n                    justify=\"space-between\"\n                    alignItems=\"space-between\">\n                    Add New Product <input type=\"text\" placeholder=\"product name\" \n                    onChange={this.setProduct} /><Grid\n                        container\n                        style={{ paddingTop: 10 }}\n                        direction=\"column\"\n                        justify=\"space-between\"\n                        alignItems=\"space-between\">\n                <Button variant=\"outlined\"disabled={productStatus} onClick={this.addProduct}>Add Product</Button></Grid> </Grid>\n        }else{\n            orderHeader = <h1>Update Orders</h1>\n        }\n        let currentWriter;\n        if (this.state.orderProducts.length>0){\n            currentWriter = <h3>Current Writer: {this.state.orderProducts[0].username}</h3>\n        }\n        return (\n            <div>\n                <Grid contianer\n                    direction=\"column\"\n                    justify=\"flex-start\"\n                    alignItems=\"center\">\n                    <Card className=\"dateToggle\">\n                        <Grid\n                            container\n                            direction=\"column\"\n                            justify=\"flex-start\"\n                            alignItems=\"center\"\n                        >\n                {orderHeader}\n                \n                <select onChange={this.setOrder}>\n                    <option value=\"\" disabled selected>Select an Order</option>\n                    {this.state.orders.map((order) => {\n                        return (<option value={order.id}>{order.order_name}</option>)\n                    })}\n                </select>\n\n                {orderWriterContent}\n\n                {currentWriter}\n                        </Grid>\n                        <Grid\n                            container\n                            style={{ padding: 20 }}\n                            direction=\"column\"\n                            justify=\"space-between\"\n                            alignItems=\"space-between\">\n                           \n                            \n                    {this.state.orderProducts.map((product) => {\n                    return (<UpdateOrdersProducts \n                    getProducts={this.getProducts} product={product}/>)\n                    })}\n                        </Grid>\n                        \n                {addOldProduct}\n                {addNewProduct}\n   \n                </Card>\n                </Grid>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = reduxStore => ({\n    reduxStore,\n});\n\n// this allows us to use <App /> in index.js\nexport default connect(mapStateToProps)(UpdateOrders);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Fab from '@material-ui/core/Fab';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport Card from '@material-ui/core/Card';\n\nimport './OrderSheetItem.css'\nclass OrderSheet extends Component {\n    componentDidMount() {\n        this.props.getProducts();\n    }\n    // this could also be written with destructuring parameters as:\n    // const UserPage = ({ user }) => (\n    // and then instead of `props.user.username` you could use `user.username`\n    // this.render\n    // \n\n    upCount = () => {\n        this.props.upQuantity(this.props.i)\n    }\n    downCount = () => {\n        this.props.downQuantity(this.props.i)\n    }\n\n    render() {\n\n        let productContent;\n        if (this.props.currentDate > this.props.date\n            || (this.props.statusId >= 3 && this.props.manager == false)) {\n            productContent = <Grid\n                container\n                style={{ padding: 20 }}\n                direction=\"column\"\n                justify=\"space-between\"\n                alignItems=\"space-between\">\n                <TableRow><Grid\n                    container\n                    style={{ padding: 20 }}\n                    direction=\"row\"\n                    justify=\"space-between\"\n                    alignItems=\"space-between\">\n                    <TableCell><h4 >{this.props.product.product_name}</h4></TableCell>\n                    <TableCell><h4 >{this.props.product.quantity}</h4></TableCell>\n                    </Grid>\n                </TableRow>\n            </Grid>\n\n        } else {\n            productContent = <Grid container\n\n                direction=\"row\"\n                justify=\"space-evenly\"\n                alignItems=\"center\"><h4 className=\"prodName\">\n                    {this.props.product.product_name}</h4>\n                <div className=\"buttonQuantity\">\n                    <Grid container\n\n                        direction=\"row\"\n                        justify=\"space-evenly\"\n                        alignItems=\"center\">< Fab variant=\"outlined\" size=\"small\" onClick={this.downCount} >-</Fab >\n                        <h4>{this.props.product.quantity}</h4>\n                        < Fab variant=\"outlined\" size=\"small\" onClick={this.upCount} >+</Fab ></Grid> </div></Grid>\n        }\n        return (<Grid\n            container\n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"center\"\n            style={{ padding: 10 }}\n        >\n            {productContent}</Grid>)\n    }\n}\n// Instead of taking everything from state, we just want the user info.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({user}) => ({ user });\nconst mapStateToProps = state => ({\n    user: state.user,\n});\n\n// this allows us to use <App /> in index.js\nexport default connect(mapStateToProps)(OrderSheet);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport OrderSheetItem from './OrderSheetItem';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Button from '@material-ui/core/Button';\nimport Fab from '@material-ui/core/Fab';\nimport TextField from '@material-ui/core/TextField';\nimport Card from '@material-ui/core/Card';\nimport './OrderSheet.css';\nconst moment = require('moment');\nconst currentDate = moment().format('L')\n\nclass OrderSheet extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            products: [],\n            notes: [],\n            note: '',\n            date: moment().format('L'),\n            orders: [],\n        }\n    }\n\n    componentDidMount() {\n        this.getProducts();\n        this.getNotes();\n        this.getOrders();\n    }\n\n    getOrders = () => {\n        console.log('in get orders');\n\n        let userInfo = {\n            id: this.props.reduxStore.user.id,\n            orderId: this.props.match.params.id,\n            date: this.state.date,\n        }\n        axios({\n            method: 'POST',\n            url: '/api/dashboardGet',\n            data: userInfo,\n        }).then((response) => {\n            this.setState({\n                orders: response.data\n            })\n        })\n\n    }\n    getProducts = (event) => {\n        console.log('in getproducts');\n        let personId;\n        for (let i = 0; i<this.state.orders.length;i++){\n            if(i.order_id==this.props.match.params.id){\n                personId=i.person_id\n            }\n        }\n        let orderDetails = {\n            id: this.props.match.params.id,\n            date: this.state.date,\n            person: personId\n        }\n        axios({\n            method: 'POST',\n            url: '/api/ordersheet/',\n            data: orderDetails,\n        }).then((response) => {\n            console.log('response.data', response.data);\n            \n            this.setState({\n                products: response.data,\n            })\n        })\n    }\n\n    getNotes = (event) => {\n        console.log('in get notes');\n\n        let note = {\n            order: this.props.match.params.id,\n            date: this.state.date,\n        }\n        axios({\n            method: 'POST',\n            url: '/api/notesGet',\n            data: note,\n        }).then((response) => {\n            this.setState({\n                notes: response.data\n            })\n        })\n    }\n    approveOrder = (event) => {\n        let products = {\n            products: this.state.products,\n            id: this.props.match.params.id,\n            date: this.state.date,\n            button: 'approve',\n        }\n        axios({\n            method: 'PUT',\n            url: '/api/ordersheet',\n            data: products,\n        }).then((response) => {\n            this.getProducts();\n            alert('Order Approved.')\n            this.props.history.push('/home')\n        }).catch((error) => {\n            console.log('error on client putting orders', error);\n\n        })\n    }\n\n    saveOrder = (event) => {\n        let products = {\n            products: this.state.products,\n            id: this.props.match.params.id,\n            date: this.state.date,\n            button: 'save',\n        }\n        axios({\n            method: 'PUT',\n            url: '/api/ordersheet',\n            data: products,\n        }).then((response) => {\n            alert('Order Saved. Remember to Submit.')\n            this.getProducts();\n        }).catch((error) => {\n            console.log('error on client putting orders', error);\n        })\n    }\n\n    submitOrder = (event) => {\n        let products = {\n            products: this.state.products,\n            id: this.props.match.params.id,\n            date: this.state.date,\n            button: 'submit',\n        }\n        axios({\n            method: 'PUT',\n            url: '/api/ordersheet',\n            data: products,\n        }).then((response) => {\n            alert('Succesfully Submitted Order!')\n            this.getProducts();\n            this.props.history.push('/home')\n        }).catch((error) => {\n            console.log('error on client putting orders', error);\n\n        })\n    }\n\n    setNote = (event) => {\n        this.setState({\n            note: {\n                ...this.state.notes,\n                note: event.target.value,\n            }\n        })\n    }\n\n    addNote = (event) => {\n        let note = {\n            id: this.props.match.params.id,\n            note: this.state.note.note,\n            date: this.state.date,\n        }\n        axios({\n            method: 'POST',\n            url: '/api/notesAdd',\n            data: note,\n        }).then((response) => {\n            this.getNotes()\n        })\n    }\n    // this could also be written with destructuring parameters as:\n    // const UserPage = ({ user }) => (\n    // and then instead of `props.user.username` you could use `user.username`\n    // this.render\n    // \n    upQuantity = i => {\n        //Credit for this function belongs to Dereje1 from this link:\n        //https://www.freecodecamp.org/forum/t/reactjs-using-setstate-to-update-a-single-property-on-an-object/146772\n        let productsCopy = JSON.parse(JSON.stringify(this.state.products))\n        productsCopy[i].quantity++;\n        this.setState({\n            products: productsCopy\n        })\n    }\n\n    downQuantity = (i) => {\n        //Credit for this function belongs to Dereje1 from this link:\n        //https://www.freecodecamp.org/forum/t/reactjs-using-setstate-to-update-a-single-property-on-an-object/146772\n        if (this.state.products[i].quantity !== 0) {\n            let productsCopy = JSON.parse(JSON.stringify(this.state.products))\n            productsCopy[i].quantity--;\n            this.setState({\n                products: productsCopy\n            })\n        }\n    }\n\n    backDay = async (event) => {\n        await this.setState({\n            date: moment(this.state.date).subtract(1, 'days').format('L'),\n        })\n        await this.componentDidMount()\n        };\n\n    forwardDay = async (event) => {\n        await this.setState({\n            date: moment(this.state.date).add(1, 'days').format('L'),\n        });\n        await this.componentDidMount()\n    };\n\n    render() {\n        let noteContent;\n        if (this.state.notes.length > 0) {\n            noteContent = <Card><List style={{padding:10}}><h3>Existing Notes:</h3>\n                {this.state.notes.map((note) => {\n                    return <ListItem>{note.note_entry}</ListItem>\n                })}\n            </List></Card>\n        }\n\n        let addNoteContent;\n        let buttons;\n        let statusId;\n        (this.state.products.map((product) => {\n            statusId = product.status_id\n            return (product.status_id)\n        }))\n        if (currentDate <= this.state.date && statusId < 3\n            && this.props.reduxStore.user.manager == false) {\n            console.log('state date:', this.state.date);\n            console.log('status ', statusId);\n            console.log('manager', this.props.reduxStore.user.manager);\n\n            addNoteContent =\n                <Grid container\n                    style={{ padding: 10 }}\n                    direction=\"column\"\n                    justify=\"flex-end\">\n                    <h3>Add Notes:</h3>\n                    <TextField variant=\"outlined\" fullWidth onChange={this.setNote} />\n                    <Grid container\n                    style={{ paddingTop: 10 }}\n                    justify=\"flex-end\"\n                    direction=\"row\">\n                <Button className=\"addNoteButton\" color=\"default\" variant=\"outlined\" \n                    onClick={this.addNote}>Add Note</Button>\n                </Grid>\n                </Grid>\n            buttons = <div><Grid\n                container\n                direction=\"row\"\n                justify=\"space-evenly\"\n                alignItems=\"center\"><Button variant=\"outlined\" onClick={this.saveOrder}>Save</Button>\n                <Button variant=\"outlined\"  onClick={this.submitOrder}>Submit</Button></Grid></div>\n        } else if (currentDate <= this.state.date &&\n            this.props.reduxStore.user.manager == true) {\n            addNoteContent =\n                <Grid container\n                    style={{ padding: 10 }}\n                    direction=\"column\"\n                    justify=\"flex-end\">\n                    <h3>Add Notes:</h3>\n                    <TextField variant=\"outlined\" fullWidth onChange={this.setNote} />\n                    <Grid container\n                        style={{ paddingTop: 10 }}\n                        justify=\"flex-end\"\n                        direction=\"row\">\n                        <Button className=\"addNoteButton\" color=\"default\" variant=\"outlined\"\n                            onClick={this.addNote}>Add Note</Button>\n                    </Grid>\n                </Grid>\n            buttons = <div><Grid\n                container\n                direction=\"row\"\n                justify=\"space-evenly\"\n                alignItems=\"center\"><Button variant=\"outlined\" onClick={this.saveOrder}>Save</Button>\n                <Button variant=\"outlined\" onClick={this.approveOrder}>Approve</Button></Grid></div>\n        }\n\n        return (\n            <div className=\"main\">\n            <Grid contianer \n            direction=\"column\"\n                justify=\"flex-start\"\n                alignItems=\"center\"\n                \n                >\n                    <Card className=\"dateToggle\">\n                <Grid\n                    container\n                    direction=\"column\"\n                    justify=\"flex-start\"\n                    alignItems=\"center\"\n                >\n                        \n                    {this.state.orders.map((order) => {\n                        \n                        if (order.order_id == this.props.match.params.id) {\n                            return (<h1>{order.order_name}</h1>)\n                        }\n                    })}\n                </Grid>\n                    \n                <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"space-evenly\"\n                    alignItems=\"center\">\n                    \n                            <Fab size=\"small\" onClick={this.backDay}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\" /><path d=\"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\" /></svg></Fab>\n                    <h2>{this.state.date}</h2>\n\n                            <Fab size=\"small\" onClick={this.forwardDay}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\" /><path d=\"M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z\" /></svg></Fab>\n                </Grid>\n                </Card >\n                    <Card className=\"dateToggle\">\n                {noteContent}\n                    \n                {addNoteContent}\n                    \n                <div>{this.state.products.map((product, i) => {\n                    return (<OrderSheetItem\n                        manager={this.props.reduxStore.user.manager}\n                        statusId={statusId}\n                        currentDate={currentDate}\n                        date={this.state.date}\n                        history={this.props.history}\n                        product={product}\n                        i={i}\n                        upQuantity={this.upQuantity}\n                        downQuantity={this.downQuantity}\n                        getProducts={this.getProducts} />)\n                })}</div>\n                    \n                {buttons}\n                    </Card>\n            </Grid>\n            </div>\n        )\n    }\n}\n// Instead of taking everything from state, we just want the user info.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({user}) => ({ user });\nconst mapStateToProps = reduxStore => ({\n    reduxStore,\n});\n\n// this allows us to use <App /> in index.js\nexport default connect(mapStateToProps)(OrderSheet);","import React, {Component} from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\n\nimport {connect} from 'react-redux';\n\nimport Nav from '../Nav/Nav';\nimport Footer from '../Footer/Footer';\n\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute'\n\nimport AboutPage from '../AboutPage/AboutPage';\nimport UserPage from '../UserPage/UserPage';\nimport InfoPage from '../InfoPage/InfoPage';\n\nimport 'typeface-roboto';\nimport './App.css';\nimport UpdateOrders from '../UpdateOrders/UpdateOrders';\nimport OrderSheet from '../OrderSheet/OrderSheet';\nimport History from '../History/History';\nclass App extends Component {\n  componentDidMount () {\n    this.props.dispatch({type: 'FETCH_USER'})\n  }\n\n  render() {\n    \n    return (\n      <Router>\n        <div>\n          <Nav />\n          <Switch>\n            {/* Visiting localhost:3000 will redirect to localhost:3000/home */}\n            <Redirect exact from=\"/\" to=\"/home\" />\n            {/* Visiting localhost:3000/about will show the about page.\n            This is a route anyone can see, no login necessary */}\n            <Route\n              exact\n              path=\"/about\"\n              component={AboutPage}\n            />\n            {/* For protected routes, the view could show one of several things on the same route.\n            Visiting localhost:3000/home will show the UserPage if the user is logged in.\n            If the user is not logged in, the ProtectedRoute will show the 'Login' or 'Register' page.\n            Even though it seems like they are different pages, the user is always on localhost:3000/home */}\n            <ProtectedRoute\n              exact\n              path=\"/home\"\n              component={UserPage}\n            />\n            <ProtectedRoute\n              exact\n              path=\"/home/:id\"\n              component={OrderSheet}\n            />\n            <ProtectedRoute\n              exact\n              path=\"/history\"\n              component={History}\n            />\n            {this.props.user.manager &&(\n              <ProtectedRoute\n                exact\n                path=\"/update\"\n                component={UpdateOrders}\n              />\n            )}\n            \n            \n            {/* This works the same as the other protected route, except that if the user is logged in,\n            they will see the info page instead. */}\n            <ProtectedRoute\n              exact\n              path=\"/info\"\n              component={InfoPage}\n            />\n            {/* If none of the other routes matched, we will show a 404. */}\n            <Route render={() => <h1>404</h1>} />\n          </Switch>\n          <Footer />\n        </div>\n      </Router>\n  )}\n}\nconst mapStateToProps = state => ({\n  user: state.user,\n});\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\n// import { takeEvery, put } from 'redux-saga/effects';\nimport rootReducer from './redux/reducers'; // imports ./redux/reducers/index.js\nimport rootSaga from './redux/sagas'; // imports ./redux/sagas/index.js\n\nimport App from './components/App/App';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\nconst middlewareList = process.env.NODE_ENV === 'development' ?\n  [sagaMiddleware, logger] :\n  [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  applyMiddleware(...middlewareList),\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('react-root'),\n);\n"],"sourceRoot":""}